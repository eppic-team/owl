package proteinstructure;

import java.io.*;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Wrapper class to call the external tool Polypose from the CCP4 package.
 * Polypose does a minimum RMSD fit of multiple structures.
 * 
 * Because of the way, CCP4 is structured, a setup script needs to be called
 * before using any of the CCP4 tools. To work around this, this class writes
 * a temporary shell script file, which calls the setup script and then the
 * Polypose executable. This means that the implementation is highly platform
 * dependent, requires /bin/sh to exist and ccp4_dir/include/ccp4.setup
 * to be a properly configured setup file for a bash environment.
 * 
 * @author stehr
 */
public class PolyposeRunner {

	/*------------------------------ constants ------------------------------*/
	private static final String CCP4_SETUP_SCRIPT_NAME = "/include/ccp4.setup";	// appended to ccp4_dir
	private static final String POLYPOSE_EXECUTABLE    = "/bin/polypose";       // appended to ccp4_dir
	private static final int    POLYPOSE_MAXCYCLE      = 10;
	
	private static final String POLYPOSE_LOG_FILE_NAME = "polypose.log";
	private static final String TMP_SCRIPT_FILE_NAME   = "polypose.sh";
	private static final String TMP_PARAM_FILE_NAME    = "polypose.params";
	private static final String TMP_DIR = System.getProperty("java.io.tmpdir");
	
	/*--------------------------- member variables --------------------------*/
	private File ccp4Dir;
	private File tmpScriptFile;
	private File tmpParamFile;
	private File ccp4SetupScript;
	private File polyposeExecutable;
	private File polyposeLog;
	private File shell;
	
	/*----------------------------- constructors ----------------------------*/
	public PolyposeRunner(String ccp4Path, String shellPath) throws IOException {
		this.shell = new File(shellPath);
		this.ccp4Dir = new File(ccp4Path);
		this.tmpScriptFile = new File(TMP_DIR, TMP_SCRIPT_FILE_NAME);
		this.tmpParamFile = new File(TMP_DIR, TMP_PARAM_FILE_NAME);
		this.polyposeLog = new File(TMP_DIR, POLYPOSE_LOG_FILE_NAME);
		
		// mark temp files to be deleted on exit
		//this.tmpScriptFile.deleteOnExit();
		//this.tmpParamFile.deleteOnExit();
		
		// make sure that polypose executable, setup script and /bin/sh exist
		this.ccp4SetupScript = new File(this.ccp4Dir, CCP4_SETUP_SCRIPT_NAME);
		this.polyposeExecutable = new File(this.ccp4Dir, POLYPOSE_EXECUTABLE);
		
		if(!shell.canExecute()) {
			throw new IOException("Could not find shell interpreter " + shell.getAbsolutePath());
		}
		
		if(!polyposeExecutable.canExecute()) {
			throw new IOException("Could not find polypose executable " + polyposeExecutable.getAbsolutePath());
		}
		
		if(!ccp4SetupScript.canRead()) {
			throw new IOException("Could not find ccp4 setup script " + ccp4SetupScript.getAbsolutePath());
		}
		
		// create temp script
		writeScriptFile();
	}
	
	/*---------------------------- private methods --------------------------*/
	
	/**
	 * Writes the temporary shell script which calls the ccp4 setup script and
	 * then the polypose executable. This script should hopefully work both
	 * in bash and tcsh environments.
	 */
	private void writeScriptFile() throws IOException {
		PrintWriter out = new PrintWriter(this.tmpScriptFile);
		out.println("#!" + shell.getAbsolutePath());
		out.println("# this script was automatically generated by " + this.getClass().getCanonicalName());
		out.println("source " + this.ccp4SetupScript.getAbsolutePath());
		out.println(this.polyposeExecutable + " $@ > " + this.polyposeLog.getAbsolutePath() + " < " + this.tmpParamFile);
		out.close();
		Runtime.getRuntime().exec("chmod u+rx " + this.tmpScriptFile.getAbsolutePath());
	}
	
	/**
	 * Writes the parameter file which is passed to polypose.
	 * @param positions
	 * @throws IOException
	 */
	private void writeParamFile(int[] positions) throws IOException {
		PrintWriter out = new PrintWriter(this.tmpParamFile);
		out.println("maxcycle " + POLYPOSE_MAXCYCLE);
		out.println("input ca");		// use only C-alpha positions
		//out.println("indep");			// calculate R0 (currently not used)
		out.println("output matrix"); 	// matrix only, no further output
		out.println("fix 1");			// fit others to structure 1
		out.close();
	}
	
	private double executePolypose(String[] filenames, String paramFileName) throws IOException {
		double rmsd = -3;
		String cmdLine, line;
		
		// build command line
		cmdLine = this.tmpScriptFile.getAbsolutePath();
		int filenum = 1;
		for(String filename:filenames) {
			cmdLine += " XYZIN" + filenum + " " + filename;
			filenum++;
		}
		//System.out.println(cmdLine);
		
		// run polypose
		Process p = Runtime.getRuntime().exec(cmdLine);
		try {
			p.waitFor();
			BufferedReader in = new BufferedReader(new FileReader(this.polyposeLog));
			Pattern r = Pattern.compile("Rms distance between structures .R1, EQN 42. =(.*),");
			while((line = in.readLine()) != null) {
				//System.out.println(line);
				Matcher m = r.matcher(line);
				if(m.find()) {
					//System.out.println(line);
					rmsd = Double.parseDouble(m.group(1).trim());
				}
			}
			in.close();
		} catch (InterruptedException e) {
			throw new IOException("Polypose process was interrupted.");
		}
		if(rmsd < 0) {
			throw new IOException("Could not find RMSD value in Polypose output file.");
		}
		return rmsd;

	}
	
	/*---------------------------- public methods ---------------------------*/
	public double superimpose(Pdb[] pdbs, int[] positions) throws IOException {
		double rmsd = -2;
		File file;
		ArrayList<String> filenames = new ArrayList<String>();
		String[] dummy = new String[pdbs.length];
		int filenum = 1;
		
		writeParamFile(positions);
		
		for(Pdb pdb:pdbs) {
			file = new File(TMP_DIR, "polypose.temp" + filenum + ".pdb");
			//file.deleteOnExit();
			PrintStream out = new PrintStream(new FileOutputStream(file));
			pdb.writeAtomLines(out, true);
			out.close();
			filenames.add(file.getAbsolutePath());
			filenum++;
		}
		rmsd = executePolypose(filenames.toArray(dummy), this.tmpParamFile.getAbsolutePath());
		return rmsd;
	}
	
	/*--------------------------------- main --------------------------------*/
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {

		ArrayList<Pdb> pdbs = new ArrayList<Pdb>();
		Pdb[] dummy = new Pdb[1];
		String[] filenames = {"/project/StruPPi/CASP8/results/T0464/T0464.reconstructed.pdb",
							  "/project/StruPPi/CASP8/results/T0464/1temp/T0464.reconstructed.pdb",
							  "/project/StruPPi/CASP8/results/T0464/2temps/T0464.reconstructed.pdb"};
		int[] positions = {};
		double rmsd = -1;
		
		for(String filename:filenames) {
			Pdb pdb = new PdbfilePdb(filename);
			try {
				pdb.load("A");
				pdbs.add(pdb);
			} catch (PdbLoadError e) {
				System.err.println("Error loading structure: " + e.getMessage());
			}
		}
		
		try {
			PolyposeRunner ppr = new PolyposeRunner("/project/StruPPi/Software/CCP4/ccp4-6.0.1","/bin/sh");
			rmsd = ppr.superimpose(pdbs.toArray(dummy), positions);
		} catch (IOException e) {
			System.err.println("An exception occured while calculating the RMSD: " + e.getMessage());
		}
		System.out.printf("mRMSD = %f\n", rmsd);

	}

}
